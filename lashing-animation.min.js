class Application{constructor(canvasElement){this.canvas=canvasElement;this.ctx=this.canvas.getContext("2d");const parent=this.canvas.parentElement;this.canvas.width=parent.clientWidth;this.canvas.height=parent.clientHeight;this.canvas.style.backgroundColor="transparent";this.images=[];this.loadedImages=0;this.currentFrameIndex=0;this.readDataAttributes();this.loadImages()}readDataAttributes(){const totalFramesAttr=this.canvas.getAttribute("data-total-frames");const imageUrlFormatAttr=this.canvas.getAttribute("data-image-url-format");if(totalFramesAttr&&imageUrlFormatAttr){this.totalImages=parseInt(totalFramesAttr,10);this.imageUrlFormat=imageUrlFormatAttr;this.imageUrls=null}else{const imageUrlsAttr=this.canvas.getAttribute("data-image-urls");if(imageUrlsAttr){try{this.imageUrls=JSON.parse(imageUrlsAttr);this.totalImages=this.imageUrls.length}catch(e){console.error(`Invalid JSON in data-image-urls for canvas "${this.canvas.id}":`,e);this.totalImages=0}}else{console.error(`Canvas element with id "${this.canvas.id}" is missing required data attributes.`);this.totalImages=0}}const triggerSelector=this.canvas.getAttribute("data-trigger");if(triggerSelector){this.triggerElement=document.querySelector(triggerSelector);if(!this.triggerElement){console.error(`Trigger element not found for selector "${triggerSelector}"`)}}else{this.triggerElement=window}const startAttr=this.canvas.getAttribute("data-start");const endAttr=this.canvas.getAttribute("data-end");this.startFraction=startAttr?parseFloat(startAttr):0;this.endFraction=endAttr?parseFloat(endAttr):1;if(isNaN(this.startFraction)||isNaN(this.endFraction)){console.error(`Invalid data-start or data-end for canvas "${this.canvas.id}". Using defaults (start: 0, end: 1).`);this.startFraction=0;this.endFraction=1}if(this.startFraction>=this.endFraction){console.error(`data-start should be less than data-end for canvas "${this.canvas.id}". Using defaults (start: 0, end: 1).`);this.startFraction=0;this.endFraction=1}}loadImages(){if(this.totalImages<=0)return;if(this.imageUrls){this.imageUrls.forEach((url,i)=>{this.loadImage(url,i)})}else if(this.imageUrlFormat){for(let i=0;i<this.totalImages;i++){const frameNumber=String(i).padStart(5,"0");const url=this.imageUrlFormat.replace("{frame}",frameNumber);this.loadImage(url,i)}}}loadImage(url,index){const img=new Image;img.crossOrigin="anonymous";img.onload=()=>{this.loadedImages++;if(this.loadedImages===this.totalImages){this.addEventListeners();this.render()}};img.onerror=e=>{console.error(`Error loading image ${index} for canvas ${this.canvas.id}:`,e)};img.src=url;this.images.push(img)}addEventListeners(){window.addEventListener("scroll",this.handleScroll);window.addEventListener("resize",this.handleResize)}handleScroll=()=>{if(!this.triggerElement)return;const rect=this.triggerElement.getBoundingClientRect();const windowHeight=window.innerHeight||document.documentElement.clientHeight;const elementHeight=this.triggerElement.offsetHeight;const totalScrollable=windowHeight+elementHeight;let scrollFraction=(windowHeight-rect.top)/totalScrollable;scrollFraction=Math.min(1,Math.max(0,scrollFraction));if(scrollFraction<this.startFraction){scrollFraction=0}else if(scrollFraction>this.endFraction){scrollFraction=1}else{scrollFraction=(scrollFraction-this.startFraction)/(this.endFraction-this.startFraction)}const frameIndex=Math.min(this.totalImages-1,Math.floor(scrollFraction*this.totalImages));if(frameIndex!==this.currentFrameIndex){this.currentFrameIndex=frameIndex;this.render()}};handleResize=()=>{this.canvas.width=window.innerWidth;this.canvas.height=window.innerHeight;this.render()};render(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);const img=this.images[this.currentFrameIndex];if(!img)return;const canvasRatio=this.canvas.width/this.canvas.height;const imgRatio=img.width/img.height;let drawWidth,drawHeight,offsetX=0,offsetY=0;if(canvasRatio>imgRatio){drawWidth=this.canvas.width;drawHeight=drawWidth/imgRatio;offsetY=(this.canvas.height-drawHeight)/2}else{drawHeight=this.canvas.height;drawWidth=drawHeight*imgRatio;offsetX=(this.canvas.width-drawWidth)/2}this.ctx.drawImage(img,offsetX,offsetY,drawWidth,drawHeight)}}window.onload=()=>{const canvases=document.querySelectorAll(".canvas_scroll-animation");canvases.forEach(canvasElement=>{new Application(canvasElement)})};